/**
 *
 * @mainpage Team 3
 *
 * @author Leonhard Kuboschek (kuboschek)
 * @author Felix Schmoll (LiftnLearn)
 * @author Maria Gladkova (mgladkova)
 *
 * ## Team members
 *
 *  * Maria Gladkova (mgladkova)
 *  * Leonhard Kuboschek (kuboschek)
 *  * Felix Schmoll (LiftnLearn)
 *
 * ## External dependencies
 *  * ```OpenCV (2.4.8)```
 *  * ```ROS (indigo)```
 *  * ```gtest (1.6.0)```
 *
 *  (Note: for the installation from the given VM there are no additional installations necessary. )
 *
 * ## Build
 *  * To build our modules, run ```catkin_make``` in the workspace root.
 *  * To run our unit tests, run ```catkin_make run_tests``` in the workspace root.
 *  * To run our solution, first source: ```source devel/setup.bash```
 *  * Then start the lab_simulator: ```roslaunch lab_simulator simulator.launch```
 *  * Then start our solution: ```roslaunch wall_following_strategy wallFollowing.launch```
 *  * Our robot is well-trained. This means that you only have to wait long enough,
 *    and it will find the circle.
 *  * Alternatively, we provide a ```launch.sh``` script for your convenience
 *
 * ## Contained packages
 *
 *  - ```half_circle_detection``` to convert laser data into circle positions
 *  - ```wall_following_strategy``` to drive the robot through the maze along walls
 *  - ```crash_recovery``` to recover from unplanned impacts with walls
 *
 * ### Half circle detection
 *  The general idea is that the ```laserScan```-data are received by the
 * ```half_circle_detection```-package and it is processing whether it can find a
 * half-circle. It then publishes its result on another topic.
 *
 * ### Wall Following Strategy
 * The ```wall_following_strategy``` package contains the strategy node,
 * which takes inputs from the half_circle_detection and crash recovery
 * modules to follow walls until a circle is seen. Once a circle
 * has been seen, the strategy drives the robot straight towards it.
 *
 * ### Crash Recovery
 * The crash recovery node performs a 'reverse-and-turn' maneuver if the robot
 * impacts with its surrounding.
 *
 * ## Further comments
 * The individual contributions of the team members were extremely unbalanced.
 * Further improvement on team collaboration and integration of pair programming
 * need to be considered in the future work. We have a decent amount of unit test cases,
 * but it might be desirable to have also some integration tests.
 *
 * We would also like to thank the TAs. Keep up the good work!
 *
 */
