/**
 *
 * @mainpage Team 3
 *
 * @author Leonhard Kuboschek (kuboschek)
 * @author Felix Schmoll (LiftnLearn)
 * @author Maria Gladkova (mgladkova)
 *
 * ## Team members
 *
 *  * Maria Gladkova (mgladkova)
 *  * Leonhard Kuboschek (kuboschek)
 *  * Felix Schmoll (LiftnLearn)
 *
 * ## External dependencies
 *  * ```OpenCV (2.4.8)```
 *  * ```ROS (indigo)```
 *  * ```gtest (1.6.0)```
 *
 *  (Note: for the installation from the given VM there are no additional installations necessary. )
 *
 * ## Contained packages
 *
 *  - ```half_circle_detection``` to convert laser data into circle positions
 *  - ```wall_following_strategy``` to drive the robot through the maze along walls
 *  - ```crash_recovery``` to recover from unplanned impacts with walls
 *
 * ### Half circle detection
 *  The general idea is that the ```laserScan```-data are received by the
 * ```half_circle_detection```-package and it is processing whether it can find a
 * half-circle. It then publishes its result on another topic.
 *
 * ### Wall Following Strategy
 * The ```wall_following_strategy``` package contains the strategy node,
 * which takes inputs from the half_circle_detection and crash recovery 
 * modules to follow walls until a circle is seen. Once a circle
 * has been seen, the strategy drives the robot straight towards it.
 *
 * ### Crash Recovery
 * The crash recovery node performs a 'reverse-and-turn' maneuver if the robot
 * impacts with its surrounding. 
 * 
 * ## Further comments
 * The individual contributions of the team members were so far quite heterogeneous.
 * Further improvement on team collaboration and integration of pair programming
 * need to be considered in the future work. The test coverage is low at the moment, 
 * although it has been increased since the last sprint.
 *
 * We would also like to thank the TAs. Keep up the good work!
 *
 */
