/**
 *
 * @mainpage Team 3
 *
 * @author Leonhard Kuboschek (kuboschek)
 * @author Felix Schmoll (LiftnLearn)
 * @author Maria Gladkova (mgladkova)
 *
 * ## Team members
 *
 *  * Maria Gladkova (mgladkova)
 *  * Leonhard Kuboschek (kuboschek)
 *  * Felix Schmoll (LiftnLearn)
 *
 * ## External dependencies
 *  * ```OpenCV```
 *  * ```ROS```
 *  * ```gtest```
 *
 *
 * ## Contained packages
 *
 *  - ```half_circle_detection``` to convert laser data into circle positions
 *  - ```movement``` base package to define a robot class, track and publish its movement
 *  - ```wall_following_strategy``` to drive the robot through the maze along walls
 *  - ```line_detection``` to detect lines in the laser scan data
 *  - ```corner_handling``` to unstick the robot in tight corners
 *  - ```crash_recovery``` to recover from unplanned impact with walls
 *
 * ### Half circle detection
 *  The general idea is that the ```laserScan```-data are received by the
 * ```half_circle_detection```-package and it is processing whether it can find a
 * halfcircle. It then publishes its result on another topic. It has currently
 * only been tested in the simulator and without any error in the laser-data, but
 * with the current implementation the circle-detection seems to work almost
 * questionably accurate (seriously, it's magic).
 *
 *
 * ### Basic movement
 * The ```movement```-package contains separate from lab_simulator launch
 * file that contain be run by following instructions in README file
 * ```movement``` is a standalone package that combines publishers of laser
 * scan data and movement messages to ensure basic movement that was sought
 * as a target functionality. Also Robot class is defined which can be enhanced
 * in future sprints with more features and coherence.
 *
 * ### Wall Following Strategy
 * The ```wall_following_strategy``` package contains the strategy node,
 * which takes inputs from the line detector, the corner handling, and the
 * crash recovery module, to follow walls until a circle is seen. Once a circle
 * has been seen, the strategy drives the robot straight toward it.
 *
 * ### Line Detection
 * The line detector generates a list of line segments, using a Hough transform,
 * from laser scan data.
 *
 * ### Corner Handling
 * The corner handling node analyzes the laser scan to determine if the robot is
 * stuck in a space that it can't turn around in.
 *
 * ### Crash Recovery
 * The crash recovery node performs a 'reverse-and-turn' maneuver if the robot
 * impacts with its surrounding.
 * 
 * ## Further comments
 * The individual contributions of the team members were so far quite heterogeneous.
 * Further improvement on team collaboration and integration of pair programming
 * needs to be considered in the future work. The test coverage is low at the moment.
 *
 * We would also like to thank the TAs. Keep up the good work!
 *
 */
