<?xml version="1.0" encoding="UTF-8"?>
<launch>

  <!-- For half circle detection -->
  <!-- Threshold (in meters) from which on distance values are not considered objects anymore. -->
	<env name="LASER_RANGE" value="3.9" />
	<env name="RANGE" value="10.0" />

  <!-- Parameter determines the size of the image converted from laserscan data-->
	<env name="STRETCH_FACTOR" value="100" />

  <!-- If the robot is too close to a wall the half-circle detection does not work properly. This is the threshold in meters that define 'too close'. -->
  	<env name="HALFCIRCLE_DETECTION_DISTANCE" value="0.3" />
  	<!-- Radius of the half circle to be detected in meters. -->
  	<env name="HALFCIRCLE_RADIUS" value="0.25" />

	<!-- For crash recovery -->
	<env name="CRASH_DISTANCE" value="0.05" />

	<!-- For wall-following strategy -->
	<env name="LINEAR_VEL" value="0.3" />
	<env name="WALL_FOLLOWING_DISTANCE" value="0.3" />

	<!-- Linear velocity value that is used in case a robot is too close
 	to the wall -->
	<env name= "CRASH_VELOCITY" value= "-0.1" />

	<!-- Angular velocity value that is used to turn (multiplier for proportional controller) -->
	<env name="TURN_CORRECTION" value="0.01" />
	<env name="TURN_CIRCLE_CORRECTION" value="0.035" />

	<node name="simulator" pkg="stage_ros" type="stageros" args="$(find lab_simulator)/worlds/lab-worlds/lab-competition03.world"/>
	<node pkg="half_circle_detection" type="half_circle_detection_node" name="half_circle_publisher" output="screen"/>
	<node pkg="wall_following_strategy" type="wall_following_strategy_node" name="wall_following_strategy" output="screen"/>
	<node pkg="crash_recovery" type="crash_recovery_node" name="crash_recovery" output="screen"/>
</launch>
