<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <!-- declaration of topic names -->
  <arg name="half_circle_topic" default="/half_circle_detection" />
  <arg name="laserScan_image_topic" default="/laserScan_image" />
  <arg name="half_circle_node_name" default="/half_circle_publisher" />
  <arg name="wall_following_node_name" default="/wall_following_strategy" />
  <arg name="crash_recovery_node_name" default="/crash_recovery" />
  <arg name="laserScan_topic" default="/base_scan" />

  <node name="simulator" pkg="stage_ros" type="stageros" args="$(find lab_simulator)/worlds/lab-worlds/lab-competition02.world"/>
	<node pkg="wall_following_strategy" type="wall_following_strategy_node" name="wall_following_strategy" args="$(arg wall_following_node_name) $(arg half_circle_topic) $(arg crash_recovery_node_name) $(arg laserScan_image_topic)" output="screen">
  <!-- Linear velocity value that is used for robot to move -->
  <param name="LINEAR_VEL" value="0.3" />
  <!-- Distance (in meters) to the wall that robot needs to keep -->
  <param name="WALL_FOLLOWING_DISTANCE" value="0.2" />
  <!-- Linear velocity value that is used in case a robot is too close
  to the wall -->
  <param name= "CRASH_VELOCITY" value= "-0.2" />
  <!-- Angular velocity value that is used to turn (multiplier for proportional controller) -->
  <param name="TURN_CORRECTION" value="0.01" />
  <!-- Angular velocity value that is used to turn in case a circle is detected -->
  <param name="TURN_CIRCLE_CORRECTION" value="0.035" />
  </node>
	<node pkg="half_circle_detection" type="half_circle_detection_node" name="half_circle_publisher" args="$(arg half_circle_node_name) $(arg half_circle_topic) $(arg laserScan_image_topic)" output="screen">
    <!-- Threshold (in meters) from which on distance values are not considered objects anymore. -->
    <param name="laserRange" value="3.9" />
    <!-- If the robot is too close to a wall the half-circle detection does not work 
properly. This is the threshold in meters that define 'too close'. -->
    <param name="minimumDistance" value="0.02" />
    <!-- Internal scaling for OpenCV images -->
    <param name="stretchFactor" value="100" />
    <!-- Radius of the half circle to be detected in meters. -->
    <param name="halfCircleRadius" value="0.25" />
     <!-- Cutoff threshold for considering sth. as a half circle -->
    <param name="minCirclePercentage" value="0.70" />
    <!-- Maximum Distance to be considered an inlier of a circle in px -->
    <param name="maxInlierDist" value="2.0" />
    <!-- Maximum average density of points on half-circle -->
    <param name="maxCircleDensity" value="0.0" />
    <!-- Maximum number of points on half-circle -->
    <param name="maxCirclePoints" value="60" />
  </node>
	<node pkg="crash_recovery" type="crash_recovery_node" name="crash_recovery" args="$(arg crash_recovery_node_name) $(arg laserScan_topic)" output="screen">
    <!-- If any point in the laser scan is below this distance, we've crashed -->
    <param name="CRASH_DISTANCE" value="0.05" />
    <!-- The length of the recovery maneuver in 'steps'. One step is equal
       to one iteration of this package's node's loop. -->
    <param name="RECOVERY_STEPS" value="20" />
  </node>
</launch>

